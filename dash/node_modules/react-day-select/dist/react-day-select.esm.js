import React, { useState, useRef, useEffect, Fragment } from 'react';

var daysShortArr = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];
var daysArr = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
var monthNamesArr = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
var monthShortArr = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'June', 'July', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];

var useDatePicker = function useDatePicker(daysShort, monthNames, monthShortName) {
  if (daysShort === void 0) {
    daysShort = daysShortArr;
  }

  if (monthNames === void 0) {
    monthNames = monthNamesArr;
  }

  if (monthShortName === void 0) {
    monthShortName = monthShortArr;
  }

  var today = new Date();
  var todayFormatted = today.getDate() + "-" + (today.getMonth() + 1) + "-" + today.getFullYear();
  var daysInWeek = [1, 2, 3, 4, 5, 6, 0];

  var _useState = useState(today),
      selectedDate = _useState[0],
      setSelectedDate = _useState[1];

  var selectedMonthLastDate = new Date(selectedDate.getFullYear(), selectedDate.getMonth() + 1, 0);
  var prevMonthLastDate = new Date(selectedDate.getFullYear(), selectedDate.getMonth(), 0);
  var daysInMonth = selectedMonthLastDate.getDate();
  var firstDayInMonth = new Date(selectedDate.getFullYear(), selectedDate.getMonth(), 1).getDay();
  var startingPoint = daysInWeek.indexOf(firstDayInMonth) + 1;
  var prevMonthStartingPoint = prevMonthLastDate.getDate() - daysInWeek.indexOf(firstDayInMonth) + 1;
  var currentMonthCounter = 1;
  var nextMonthCounter = 1;
  var rows = 6;
  var cols = 7;
  var calendarRows = {};

  for (var i = 1; i < rows + 1; i++) {
    for (var j = 1; j < cols + 1; j++) {
      if (!calendarRows[i]) {
        calendarRows[i] = [];
      }

      if (i === 1) {
        if (j < startingPoint) {
          calendarRows[i] = [].concat(calendarRows[i], [{
            classes: 'in_prev_month ',
            date: prevMonthStartingPoint + "-" + (selectedDate.getMonth() === 0 ? 12 : selectedDate.getMonth()) + "-" + (selectedDate.getMonth() === 0 ? selectedDate.getFullYear() - 1 : selectedDate.getFullYear()),
            value: prevMonthStartingPoint
          }]);
          prevMonthStartingPoint++;
        } else {
          calendarRows[i] = [].concat(calendarRows[i], [{
            classes: 'same_month',
            date: currentMonthCounter + "-" + (selectedDate.getMonth() + 1) + "-" + selectedDate.getFullYear(),
            value: currentMonthCounter
          }]);
          currentMonthCounter++;
        }
      } else if (i > 1 && currentMonthCounter < daysInMonth + 1) {
        calendarRows[i] = [].concat(calendarRows[i], [{
          classes: 'same_month',
          date: currentMonthCounter + "-" + (selectedDate.getMonth() + 1) + "-" + selectedDate.getFullYear(),
          value: currentMonthCounter
        }]);
        currentMonthCounter++;
      } else {
        calendarRows[i] = [].concat(calendarRows[i], [{
          classes: 'in_next_month',
          date: nextMonthCounter + "-" + (selectedDate.getMonth() + 2 === 13 ? 1 : selectedDate.getMonth() + 2) + "-" + (selectedDate.getMonth() + 2 === 13 ? selectedDate.getFullYear() + 1 : selectedDate.getFullYear()),
          value: nextMonthCounter
        }]);
        nextMonthCounter++;
      }
    }
  }

  var getPrevMonth = function getPrevMonth() {
    setSelectedDate(function (prevValue) {
      return new Date(prevValue.getFullYear(), prevValue.getMonth() - 1, prevValue.getDate());
    });
  };

  var getNextMonth = function getNextMonth() {
    setSelectedDate(function (prevValue) {
      return new Date(prevValue.getFullYear(), prevValue.getMonth() + 1, prevValue.getDate());
    });
  };

  var getWeekDay = function getWeekDay() {
    var day = new Date(selectedDate).getDay();
    return daysArr[day];
  };

  var dateClickHandler = function dateClickHandler(date) {
    var view = date.split('-');
    var month = view[1];
    var day = view[0];
    var year = view[2];
    setSelectedDate(new Date(JSON.parse(year), JSON.parse(month) - 1, JSON.parse(day)));
  };

  var selectedYear = function selectedYear(date) {
    setSelectedDate(function (prevValue) {
      return new Date(date, prevValue.getMonth(), prevValue.getDate());
    });
  };

  return {
    daysShort: daysShort,
    monthNames: monthNames,
    monthShortName: monthShortName,
    todayFormatted: todayFormatted,
    calendarRows: calendarRows,
    selectedDate: selectedDate,
    getPrevMonth: getPrevMonth,
    getNextMonth: getNextMonth,
    getWeekDay: getWeekDay,
    dateClickHandler: dateClickHandler,
    selectedYear: selectedYear
  };
};

function styleInject(css, ref) {
  if ( ref === void 0 ) ref = {};
  var insertAt = ref.insertAt;

  if (!css || typeof document === 'undefined') { return; }

  var head = document.head || document.getElementsByTagName('head')[0];
  var style = document.createElement('style');
  style.type = 'text/css';

  if (insertAt === 'top') {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }

  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}

var css_248z = ".style-module_react_pick_date_container__3fvSp {\n  z-index: 10;\n}\n.style-module_react_pick_date_main__1Jt7w {\n  min-width: 310px;\n  max-width: 310px;\n}\n.style-module_react_pick_date_main__1Jt7w {\n  background-color: #2b7479;\n}\n.style-module_react_pick_date_button__3LBsk {\n  color: #009e6c;\n  width: 75px;\n  padding: 8px 6px;\n  font-weight: 500;\n}\n.style-module_react_pick_date_button__3LBsk:hover {\n  background-color: rgba(0, 0, 0, 0.1);\n}\n.style-module_react_pick_date_button_container__fuumL {\n  padding: 8px;\n  display: flex;\n  justify-content: flex-end;\n}\n.style-module_react_picker_year_view__As72c {\n  justify-content: center;\n  display: flex;\n  font-size: 1rem;\n  font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n  font-weight: 400;\n  line-height: 1.75;\n  letter-spacing: 0.00938em;\n  color: #000;\n  height: 40px;\n  cursor: pointer;\n}\n.style-module_react_pick_date_second_heading__1BdUF {\n  display: flex;\n  font-size: 2.125rem;\n  font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n  font-weight: 400;\n  line-height: 1.235;\n  letter-spacing: 0.00735em;\n  color: #fff;\n  white-space: nowrap;\n  margin: 15px 10px;\n}\n.style-module_react_pick_date_year__MPzil {\n  font-size: 1rem;\n  font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n  font-weight: 400;\n  line-height: 1.75;\n  letter-spacing: 0.00938em;\n  color: #000;\n}\n.style-module_react_picker_year_view_selected__2bYm4 {\n  color: #3f51b5;\n  cursor: pointer;\n  font-size: 1.5rem;\n  font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n  font-weight: 500;\n  line-height: 1.334;\n  letter-spacing: 0em;\n  height: 40px;\n}\n.style-module_react_pick_date_year_heading_cotainer__gTiQ1 {\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start !important;\n}\n.style-module_react_pick_date_year_heading__2FeLi {\n  font-size: 1rem;\n  font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n  font-weight: 400;\n  line-height: 1.75;\n  letter-spacing: 0.00938em;\n  color: #fff;\n  display: flex;\n  justify-content: flex-start;\n  margin-left: 20px;\n  margin-top: 20px;\n  cursor: pointer;\n}\n.style-module_react_pick_date_flex_end__2JgmN {\n  justify-content: flex-end;\n}\n.style-module_marginright_10__1vHYx {\n  margin-right: 10px;\n}\n.style-module_react_pick_date_marginLeft__1Y2Em {\n  margin-left: 5px;\n}\n.style-module_react_pick_color_black__2FkRZ {\n  color: #000;\n}\n.style-module_react_calender_view__2VkA1 {\n  display: flex;\n  justify-content: space-between;\n}\n.style-module_react_pick_date_second__1M1Uy {\n  display: flex;\n  justify-content: space-between;\n  width: 80%;\n  margin: auto;\n  color: #000;\n  align-items: center;\n}\n.style-module_react_pick_date_w_100__2WMvH {\n  width: 100%;\n}\n.style-module_react_pick_date_td__c1JyU {\n  width: 35px;\n  margin: auto;\n  justify-content: center;\n  display: flex;\n  cursor: pointer;\n  color: #000;\n}\n.style-module_react_pick_date_td__c1JyU:hover {\n  background-color: rgba(0, 0, 0, 0.1);\n  border-radius: 2rem;\n}\n.style-module_react_pick_date_td__c1JyU:focus {\n  background: salmon;\n  border-radius: 2rem;\n}\n.style-module_react_pick_date_tr__lFQRb {\n  display: flex;\n  justify-content: space-around;\n  height: 35px;\n  font-size: 12px;\n}\n.style-module_react_pick_date_tr__lFQRb > th {\n  color: rgba(0, 0, 0, 0.38);\n}\n.style-module_react_pick_date_height__3_Fwd {\n  height: 315px;\n  overflow-y: scroll;\n}\n\n.style-module_react_date_pick_input__2c3jJ {\n  width: 100%;\n  padding: 10px;\n  border: 1px solid;\n  color: #000;\n}\n\n.style-module_react_pic_date_popup__1QnDI {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100vh;\n  background-color: rgba(0, 0, 0, 0.2);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n.style-module_react_pic_date_popup_inner__2W1VX {\n  position: relative;\n  padding: 0;\n  width: 100%;\n  max-width: 310px;\n  background-color: #fff;\n}\n\n.style-module_react_pick_same_month__2q2rG {\n  width: 35px;\n  margin: auto;\n  justify-content: center;\n  display: flex;\n  cursor: pointer;\n  color: #000;\n  font-size: 14px;\n}\n.style-module_react_pick_another_month__2d9gJ {\n  width: 35px;\n  margin: auto;\n  justify-content: center;\n  display: flex;\n  cursor: pointer;\n  opacity: 0;\n  font-size: 14px;\n}\n.style-module_react_day_select_today__31c_c {\n  background-color: #009e6c;\n  color: #fff;\n  border-radius: 2rem;\n  width: 35px;\n  margin: auto;\n  justify-content: center;\n  display: flex;\n  cursor: pointer;\n  font-size: 14px;\n}\n";
var styles = {"react_pick_date_container":"style-module_react_pick_date_container__3fvSp","react_pick_date_main":"style-module_react_pick_date_main__1Jt7w","react_pick_date_button":"style-module_react_pick_date_button__3LBsk","react_pick_date_button_container":"style-module_react_pick_date_button_container__fuumL","react_picker_year_view":"style-module_react_picker_year_view__As72c","react_pick_date_second_heading":"style-module_react_pick_date_second_heading__1BdUF","react_pick_date_year":"style-module_react_pick_date_year__MPzil","react_picker_year_view_selected":"style-module_react_picker_year_view_selected__2bYm4","react_pick_date_year_heading_cotainer":"style-module_react_pick_date_year_heading_cotainer__gTiQ1","react_pick_date_year_heading":"style-module_react_pick_date_year_heading__2FeLi","react_pick_date_flex_end":"style-module_react_pick_date_flex_end__2JgmN","marginright_10":"style-module_marginright_10__1vHYx","react_pick_date_marginLeft":"style-module_react_pick_date_marginLeft__1Y2Em","react_pick_color_black":"style-module_react_pick_color_black__2FkRZ","react_calender_view":"style-module_react_calender_view__2VkA1","react_pick_date_second":"style-module_react_pick_date_second__1M1Uy","react_pick_date_w_100":"style-module_react_pick_date_w_100__2WMvH","react_pick_date_td":"style-module_react_pick_date_td__c1JyU","react_pick_date_tr":"style-module_react_pick_date_tr__lFQRb","react_pick_date_height":"style-module_react_pick_date_height__3_Fwd","react_date_pick_input":"style-module_react_date_pick_input__2c3jJ","react_pic_date_popup":"style-module_react_pic_date_popup__1QnDI","react_pic_date_popup_inner":"style-module_react_pic_date_popup_inner__2W1VX","react_pick_same_month":"style-module_react_pick_same_month__2q2rG","react_pick_another_month":"style-module_react_pick_another_month__2d9gJ","react_day_select_today":"style-module_react_day_select_today__31c_c"};
styleInject(css_248z);

var PopUp = function PopUp(props) {
  return props.trigger ? React.createElement("div", {
    className: styles.react_pic_date_popup
  }, React.createElement("div", {
    className: styles.react_pic_date_popup_inner
  }, props.children)) : null;
};

function useOutsideAlerter(ref, handleExit) {
  useEffect(function () {
    /**
     * Alert if clicked on outside of element
     */
    function handleClickOutside(event) {
      if (ref.current && !ref.current.contains(event.target)) {
        handleExit();
      }
    } // Bind the event listener


    document.addEventListener("mousedown", handleClickOutside);
    return function () {
      // Unbind the event listener on clean up
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, [ref]);
}

var DatePicker = function DatePicker(_ref) {
  var bgColor = _ref.bgColor,
      onChange = _ref.onChange,
      format = _ref.format;

  var _useState = useState(false),
      isVisible = _useState[0],
      setIsVisible = _useState[1];

  var _useState2 = useState(""),
      selectedDateValue = _useState2[0],
      setSelectedDateValue = _useState2[1];

  var _useState3 = useState(false),
      yearView = _useState3[0],
      setYearView = _useState3[1];

  var _useDatePicker = useDatePicker(),
      calendarRows = _useDatePicker.calendarRows,
      selectedDate = _useDatePicker.selectedDate,
      todayFormatted = _useDatePicker.todayFormatted,
      daysShort = _useDatePicker.daysShort,
      monthNames = _useDatePicker.monthNames,
      monthShortName = _useDatePicker.monthShortName,
      getNextMonth = _useDatePicker.getNextMonth,
      getPrevMonth = _useDatePicker.getPrevMonth,
      getWeekDay = _useDatePicker.getWeekDay,
      dateClickHandler = _useDatePicker.dateClickHandler,
      selectedYear = _useDatePicker.selectedYear;

  var wrapperRef = useRef(null);

  var handleExit = function handleExit() {
    setIsVisible(false);
  };

  useOutsideAlerter(wrapperRef, handleExit);

  var setValues = function setValues(value) {
    setSelectedDateValue(value);
    onChange && onChange(value);
  };

  var okHandler = function okHandler() {
    var month = monthNames[selectedDate.getMonth()];
    var mon = monthShortName[selectedDate.getMonth()];
    var year = selectedDate.getFullYear();
    var date = selectedDate.getDate();

    if (format === 'MM-DD-YYYY') {
      setValues(month + "-" + date + "-" + year);
    } else if (format === 'mm-dd-yyyy') {
      setValues(mon + "-" + date + "-" + year);
    } else if (format === 'MM/DD/YYYY') {
      setValues(month + "/" + date + "/" + year);
    } else if (format === 'mm/dd/yyyy') {
      setValues(mon + "/" + date + "/" + year);
    } else if (format === 'DD-MM-YYYY') {
      setValues(date + "-" + month + "-" + year);
    } else if (format === 'dd-mm-yyyy') {
      setValues(date + "-" + mon + "-" + year);
    } else if (format === 'DD/MM/YYYY') {
      setValues(date + "/" + month + "/" + year);
    } else if (format === 'dd/mm/yyyy') {
      setValues(mon + "/" + date + "/" + year);
    } else if (format === 'YYYY-MM-DD') {
      setValues(year + "-" + month + "-" + date);
    } else if (format === 'yyyy-mm-dd') {
      setValues(year + "-" + mon + "-" + date);
    } else if (format === 'YYYY/MM/DD') {
      setValues(year + "/" + month + "/" + date);
    } else if (format === 'yyyy/mm/dd') {
      setValues(year + "/" + mon + "/" + date);
    } else {
      setValues(month + " " + date + " " + year);
    }

    setIsVisible(false);
  };

  var cancelHandler = function cancelHandler() {
    setIsVisible(false);
  };

  var currentYear = new Date().getFullYear();

  var range = function range(start, stop, step) {
    return Array.from({
      length: (stop - start) / step + 1
    }, function (_, i) {
      return start + i * step;
    });
  };

  var yearArray = range(currentYear + 50, currentYear - 100, -1).reverse();

  var _useState4 = useState(todayFormatted),
      dateForCondition = _useState4[0],
      setDateForCondition = _useState4[1];

  useEffect(function () {
    var month = selectedDate.getMonth() + 1;
    var year = selectedDate.getFullYear();
    var date = selectedDate.getDate();
    setDateForCondition(date + "-" + month + "-" + year);
  }, [selectedDate]);
  useEffect(function () {
    if (yearView) {
      var element = window.document.getElementById("react-pick-date-selectedYear");
      element == null ? void 0 : element.scrollIntoView({
        behavior: 'auto',
        block: 'center',
        inline: 'center'
      });
    }
  }, [yearView]);
  return React.createElement(Fragment, null, React.createElement("input", {
    placeholder: "--/--/----",
    readOnly: true,
    value: selectedDateValue,
    className: styles.react_date_pick_input,
    onClick: function onClick() {
      return setIsVisible(true);
    }
  }), React.createElement(PopUp, {
    trigger: isVisible
  }, React.createElement("div", {
    ref: wrapperRef,
    className: styles.react_pick_date_container
  }, React.createElement("div", {
    style: {
      backgroundColor: bgColor
    },
    className: styles.react_pick_date_main
  }, React.createElement("div", {
    className: styles.react_pick_date_year_heading_cotainer
  }, React.createElement("span", {
    onClick: function onClick() {
      return setYearView(true);
    },
    className: styles.react_pick_date_year_heading
  }, [selectedDate.getFullYear()]), React.createElement("div", {
    className: styles.react_pick_date_second_heading
  }, React.createElement("span", null, getWeekDay()), React.createElement("span", null, ","), React.createElement("span", {
    className: styles.react_pick_date_marginLeft
  }, monthShortName[selectedDate.getMonth()] + " " + selectedDate.getDate())))), yearView ? React.createElement("div", {
    className: styles.react_pick_date_height
  }, yearArray.map(function (item) {
    return React.createElement("div", {
      key: item,
      onClick: function onClick() {
        selectedYear(item);
        setYearView(false);
      }
    }, item === selectedDate.getFullYear() ? React.createElement("div", {
      id: "react-pick-date-selectedYear",
      className: styles.react_picker_year_view_selected
    }, item) : React.createElement("div", {
      className: styles.react_picker_year_view
    }, item));
  })) : React.createElement("div", {
    className: styles.react_pick_date_height
  }, React.createElement("div", {
    className: styles.react_pick_date_second
  }, React.createElement("div", {
    onClick: getPrevMonth
  }, React.createElement("svg", {
    width: "1rem",
    height: "1rem",
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    stroke: "currentColor"
  }, React.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    strokeWidth: 2,
    d: "M15 19l-7-7 7-7"
  }))), React.createElement("p", {
    className: styles.react_pick_date_year
  }, monthNames[selectedDate.getMonth()] + " " + selectedDate.getFullYear()), React.createElement("div", {
    onClick: getNextMonth
  }, React.createElement("svg", {
    width: "1rem",
    height: "1rem",
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    stroke: "currentColor"
  }, React.createElement("path", {
    strokeLinecap: "round",
    strokeLinejoin: "round",
    strokeWidth: 2,
    d: "M9 5l7 7-7 7"
  })))), React.createElement("table", {
    className: styles.react_pick_date_w_100
  }, React.createElement("thead", null, React.createElement("tr", {
    className: styles.react_pick_date_tr
  }, daysShort.map(function (day) {
    return React.createElement("th", {
      key: day
    }, day);
  }))), React.createElement("tbody", null, Object.values(calendarRows).map(function (cols) {
    return React.createElement("tr", {
      className: styles.react_pick_date_tr,
      key: cols[0].date
    }, cols.map(function (col) {
      return col.date === dateForCondition ? React.createElement("td", {
        key: col.date
      }, React.createElement("div", {
        className: styles.react_day_select_today,
        onClick: function onClick() {
          return dateClickHandler(col.date);
        }
      }, col.value)) : React.createElement("td", {
        key: col.date
      }, col.classes === 'same_month' ? React.createElement("div", {
        className: styles.react_pick_same_month,
        onClick: function onClick() {
          return dateClickHandler(col.date);
        }
      }, col.value) : React.createElement("div", {
        className: styles.react_pick_another_month,
        onClick: function onClick() {
          return dateClickHandler(col.date);
        }
      }, col.value));
    }));
  })))), React.createElement("div", null, React.createElement("div", {
    className: styles.react_pick_date_button_container
  }, React.createElement("div", {
    className: styles.react_pick_date_button,
    onClick: cancelHandler
  }, "CANCEL"), React.createElement("div", {
    className: styles.react_pick_date_button,
    onClick: okHandler
  }, "OK"))))));
};

export default DatePicker;
//# sourceMappingURL=react-day-select.esm.js.map
