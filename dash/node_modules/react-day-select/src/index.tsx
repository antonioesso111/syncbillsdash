
import React, { Fragment, FC, useEffect, useRef, useState } from "react";

import useDatePicker, { Column } from "./useDatePicker";
import PopUp from "./popup";
import styles from './style.module.css';

function useOutsideAlerter(ref:any, handleExit:any) {
  useEffect(() => {
    /**
     * Alert if clicked on outside of element
     */
    function handleClickOutside(event:any) {
      if (ref.current && !ref.current.contains(event.target)) {
        handleExit();
      }
    }

    // Bind the event listener
    document.addEventListener("mousedown", handleClickOutside);
    return () => {
      // Unbind the event listener on clean up
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, [ref]);
}

const DatePicker: FC = ({ bgColor,onChange,format }: any) => {
  const [isVisible, setIsVisible] = useState(false);
  const [selectedDateValue, setSelectedDateValue] = useState("");
  const [yearView, setYearView] = useState(false);

  const {
    calendarRows,
    selectedDate,
    todayFormatted,
    daysShort,
    monthNames,
    monthShortName,
    getNextMonth,
    getPrevMonth,
    getWeekDay,
    dateClickHandler,
    selectedYear
  } = useDatePicker();

  const wrapperRef = useRef(null);
  const handleExit = () => {
    setIsVisible(false);
  };
  useOutsideAlerter(wrapperRef, handleExit);

  const setValues = (value:string)=>{
    setSelectedDateValue(value);
    onChange && onChange(value);
  }

  const okHandler = () => {
    const month = monthNames[selectedDate.getMonth()];
    const mon = monthShortName[selectedDate.getMonth()];
    const year = selectedDate.getFullYear();
    const date = selectedDate.getDate();
    if(format==='MM-DD-YYYY'){
      setValues(month + "-" + date + "-" + year)
    } else if(format ==='mm-dd-yyyy'){
      setValues(mon + "-" + date + "-" + year)
    }else if(format==='MM/DD/YYYY'){
      setValues(month + "/" + date + "/" + year)
    } else if(format ==='mm/dd/yyyy'){
      setValues(mon + "/" + date + "/" + year)
    }else if(format==='DD-MM-YYYY'){
      setValues(date+ "-" + month + "-" + year);
    } else if(format ==='dd-mm-yyyy'){
      setValues(date + "-" + mon + "-" + year);
    }else if(format==='DD/MM/YYYY'){
      setValues( date+ "/" + month + "/" + year);
    } else if(format ==='dd/mm/yyyy'){
      setValues(mon + "/" + date + "/" + year)
    }else if(format==='YYYY-MM-DD'){
      setValues(year + "-" + month + "-" + date)
    } else if(format ==='yyyy-mm-dd'){
      setValues(year + "-" + mon + "-" + date);
    }else if(format==='YYYY/MM/DD'){
      setValues(year + "/" + month + "/" + date)
    } else if(format ==='yyyy/mm/dd'){
      setValues(year + "/" + mon + "/" + date);
    }

    else{
      setValues(month + " " + date + " " + year)
    }
    
    setIsVisible(false);
    
  };
  const cancelHandler = () => {
    setIsVisible(false);
  };

  const currentYear = (new Date()).getFullYear();
const range = (start:any, stop:any, step:any) => Array.from({ length: (stop - start) / step + 1}, (_, i) => start + (i * step));
const yearArray = (range(currentYear+50, currentYear - 100, -1)).reverse();


  const [dateForCondition, setDateForCondition] = useState(todayFormatted);
  useEffect(() => {
    const month = selectedDate.getMonth() + 1;
    const year = selectedDate.getFullYear();
    const date = selectedDate.getDate();
    setDateForCondition(date + "-" + month + "-" + year);
  }, [selectedDate]);

  useEffect(()=>{
    if(yearView){
      const element = window.document.getElementById("react-pick-date-selectedYear");
     element?.scrollIntoView({
      behavior: 'auto',
      block: 'center',
      inline: 'center'
  });
    }
   
  },[yearView])

  return (
    <Fragment>
      <input
        placeholder="--/--/----"
        readOnly
        value={selectedDateValue}
        className={styles.react_date_pick_input}
        onClick={() => setIsVisible(true)}
      />
      <PopUp trigger={isVisible}>
        <div ref={wrapperRef} className={styles.react_pick_date_container}>
          <div
            style={{ backgroundColor: bgColor }}
            className={styles.react_pick_date_main}
          >
            <div className={styles.react_pick_date_year_heading_cotainer}>
              <span
                onClick={() => setYearView(true)}
                className={styles.react_pick_date_year_heading}
              >
                {[selectedDate.getFullYear()]}
              </span>
              <div className={styles.react_pick_date_second_heading}>
                <span>{getWeekDay()}</span>
                <span>,</span>
                <span className={styles.react_pick_date_marginLeft}>{`${
                  monthShortName[selectedDate.getMonth()]
                } ${selectedDate.getDate()}`}</span>
              </div>
            </div>
          </div>
          {yearView ? (
            <div className={styles.react_pick_date_height}>
               {yearArray.map((item:any)=>(
                 <div key={item} onClick={()=>{selectedYear(item);setYearView(false)}}>
                      {item=== selectedDate.getFullYear()?(
                        <div id="react-pick-date-selectedYear" className={styles.react_picker_year_view_selected}>{item}</div>
                      ):(
                        <div className={styles.react_picker_year_view}>{item}</div>
                      )}
                 </div>
               ))}
            </div>
          ) : (
            <div className={styles.react_pick_date_height}>
              <div className={styles.react_pick_date_second}>
                <div onClick={getPrevMonth}>
                  <svg
                    width="1rem"
                    height="1rem"
                    xmlns="http://www.w3.org/2000/svg"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke="currentColor"
                  >
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      strokeWidth={2}
                      d="M15 19l-7-7 7-7"
                    />
                  </svg>
                </div>
                <p className={styles.react_pick_date_year}>{`${
                  monthNames[selectedDate.getMonth()]
                } ${selectedDate.getFullYear()}`}</p>
                <div onClick={getNextMonth}>
                  <svg
                    width="1rem"
                    height="1rem"
                    xmlns="http://www.w3.org/2000/svg"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke="currentColor"
                  >
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      strokeWidth={2}
                      d="M9 5l7 7-7 7"
                    />
                  </svg>
                </div>
              </div>

              <table className={styles.react_pick_date_w_100}>
                <thead>
                  <tr className={styles.react_pick_date_tr}>
                    {daysShort.map((day) => (
                      <th key={day}>{day}</th>
                    ))}
                  </tr>
                </thead>
                <tbody>
                  {Object.values(calendarRows).map((cols: Column[]) => {
                    return (
                      <tr className={styles.react_pick_date_tr} key={cols[0].date}>
                        {cols.map((col) =>
                          col.date === dateForCondition ? (
                            <td key={col.date}>
                            <div
                              className={styles.react_day_select_today}
                              onClick={() => dateClickHandler(col.date)}
                            >
                              {col.value}
                            </div>
                            </td>
                          ) : (
                            <td key={col.date}>
                            {col.classes==='same_month'?(
                              <div
                              className={styles.react_pick_same_month}
                              onClick={() => dateClickHandler(col.date)}
                            >
                              {col.value}
                            </div>
                            ):(
                              <div
                              
                              className={styles.react_pick_another_month}
                              onClick={() => dateClickHandler(col.date)}
                            >
                              {col.value}
                            </div>
                            )}
                            </td>
                            
                          )
                        )}
                      </tr>
                    );
                  })}
                </tbody>
              </table>
            </div>
          )}

          <div>
            <div className={styles.react_pick_date_button_container}>
              <div
                className={styles.react_pick_date_button}
                onClick={cancelHandler}
              >
                CANCEL
              </div>
              <div className={styles.react_pick_date_button} onClick={okHandler}>
                OK
              </div>
            </div>
          </div>
        </div>
      </PopUp>
    </Fragment>
  );
};

export default DatePicker

